
import psutil
import asyncio
import re
import ast
import random
import datetime
import pytz
import math
from pyrogram.errors.exceptions.bad_request_400 import MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty
from Script import script
import pyrogram
from database.connections_mdb import active_connection, all_connections, delete_connection, if_active, make_active, \
    make_inactive
from info import ADMINS, PICS_RT, AUTH_CHANNEL, AUTH_USERS, CUSTOM_FILE_CAPTION, AUTH_GROUPS, P_TTI_SHOW_OFF, IMDB, \
    SINGLE_BUTTON, SPELL_CHECK_REPLY, IMDB_TEMPLATE, DELETE_TIME, CH_FILTER, CH_LINK, UNAUTHORIZED_CALLBACK_TEXT, REQ_PIC, \
    AUTO_FILTER
from pyrogram import *
from pyrogram.types import *
from pyrogram.errors import FloodWait, UserIsBlocked, MessageNotModified, PeerIdInvalid
from utils import get_size, get_poster, search_gagala, temp, get_settings, save_group_settings
from database.users_chats_db import db
from database.ia_filterdb import Media, get_file_details, get_search_results
from database.filters_mdb import (
    filter_stats,
    del_all,
    find_filter,
    get_filters,
)
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

BUTTONS = {}
SPELL_CHECK = {}

@Client.on_message(filters.command(['start']) & filters.private)
async def clone_start(bot, msg):
 
  btn = [[
      InlineKeyboardButton('‚ùóH·¥á ü·¥ò', callback_data="c_help"),
      InlineKeyboardButton('üòé A ô·¥è·¥ú·¥õ', callback_data="c_about")
  ]]
  await msg.reply_text(
      text = f"<b>Y·¥è Y·¥è !\nI·¥Ä·¥ç A S…™·¥ç·¥ò ü·¥á A·¥ú·¥õ·¥è F…™ ü·¥õ·¥á + F…™ ü·¥á S ú·¥Ä Ä·¥á B·¥è·¥õ...</b>",
      reply_markup = InlineKeyboardMarkup(btn)
  )

  
@Client.on_message(filters.group & filters.text & filters.incoming)
async def give_filter2(client, message):
    k = await manual_filters(client, message)
    if k == False:
        await auto_filter(client, message)  
  
@Client.on_callback_query(filters.regex(r"^next"))
async def next_page(bot, query):
    ident, req, key, offset = query.data.split("_")
    if int(req) not in [query.from_user.id, 0]:
        return await query.answer(UNAUTHORIZED_CALLBACK_TEXT, show_alert=True)
    try:
        offset = int(offset)
    except:
        offset = 0
    search = BUTTONS.get(key)
    if not search:
        await query.answer("You are using one of my old messages, please send the request again.", show_alert=True)
        return

    files, n_offset, total = await get_search_results(search, offset=offset, filter=True)
    try:
        n_offset = int(n_offset)
    except:
        n_offset = 0

    if not files:
        return
    settings = await get_settings(query.message.chat.id)
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"‚äπ {get_size(file.file_size)} ‚Ä£ {file.file_name}", callback_data=f'file#{file.file_id}#{query.from_user.id if query.from_user is not None else 0}'),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"‚Ä¢ {file.file_name}", callback_data=f'file#{file.file_id}#{query.from_user.id if query.from_user is not None else 0}'
                ),
                InlineKeyboardButton(
                    text=f"‚û™ {get_size(file.file_size)}",
                    callback_data=f'file#{file.file_id}#{query.from_user.id if query.from_user is not None else 0}',
                ),
            ]
            for file in files
        ]

    btn.insert(0, 
        [
            InlineKeyboardButton(f'F…™ ü·¥ás: {len(files)}', 'dupe'),
            InlineKeyboardButton(f'M·¥è·¥†…™·¥á', 'dupe'),
            InlineKeyboardButton(f'S·¥á Ä…™·¥áÍú±', 'dupe')
        ]
    )
   

    if 0 < offset <= 7:
        off_set = 0
    elif offset == 0:
        off_set = None
    else:
        off_set = offset - 7
    if n_offset == 0:
        btn.append(
            [InlineKeyboardButton("P·¥Ä…¢·¥ás", callback_data="pages"),
             InlineKeyboardButton(text=f"{math.ceil(int(offset) / 10) + 1} - {math.ceil(total / 10)}", callback_data="pages"),
             InlineKeyboardButton("‚Ä¢ B·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}")]
        )
       
    elif off_set is None:
        btn.append(
            [
                InlineKeyboardButton("P·¥Ä…¢·¥ás", callback_data="pages"),
                InlineKeyboardButton(text=f"{math.ceil(int(offset) / 10) + 1} - {math.ceil(total / 10)}", callback_data="pages"),
                InlineKeyboardButton("N·¥áx·¥õ ‚Ä¢", callback_data=f"next_{req}_{key}_{n_offset}")]
        )
        
    else:
        btn.append(
            [
                InlineKeyboardButton("‚Ä¢ B·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
                InlineKeyboardButton(text=f"{math.ceil(int(offset) / 10) + 1} - {math.ceil(total / 10)}", callback_data="pages"),
                InlineKeyboardButton("N·¥áx·¥õ ‚Ä¢", callback_data=f"next_{req}_{key}_{n_offset}")]
        )
        
    try:
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(btn)
        )
    except MessageNotModified:
        pass
    await query.answer(f'‚çü P·¥Ä…¢·¥á N·¥è : {math.ceil(int(offset) / 10) + 1} / {math.ceil(total / 10)} ‚çü T·¥è·¥õ·¥Ä ü R·¥ás·¥ú ü·¥õs : {len(files)}')


@Client.on_callback_query(filters.regex(r"^spolling"))
async def advantage_spoll_choker(bot, query):
    _, user, movie_ = query.data.split('#')
    if int(user) != 0 and query.from_user.id != int(user):
        return await query.answer(UNAUTHORIZED_CALLBACK_TEXT, show_alert=True)
    if movie_ == "close_spellcheck":
        return await query.message.delete()
    movies = SPELL_CHECK.get(query.message.reply_to_message_id)
    if not movies:
        return await query.answer("A ú ú B·¥ú·¥õ·¥õ·¥è…¥ Ex·¥ò…™ Ä·¥á·¥Ö üòí", show_alert=True)
    movie = movies[(int(movie_))]
    await query.answer('W·¥Ä…™·¥õ C ú·¥á·¥Ñ·¥ã…™…¥…¢...')
    k = await manual_filters(bot, query.message, text=movie)
    if k == False:
        files, offset, total_results = await get_search_results(movie, offset=0, filter=True)
        if files:
            k = (movie, files, offset, total_results)
            await auto_filter(bot, query, k)
        else:
            btn = [
                [
                    InlineKeyboardButton(
                        '‚ûï ·¥Ä·¥Ö·¥Ö  ô·¥è·¥õ ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï', url=f'http://t.me/{temp.U_NAME}?startgroup=true'
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üó£Ô∏è R·¥á«´·¥ú·¥ás·¥õ H·¥á Ä·¥á", url="t.me/cinema_lookam"
                    ),
                    InlineKeyboardButton(
                        "üì£ M·¥è·¥†…™·¥á U·¥ò·¥Ö·¥Ä·¥õ·¥á", url="t.me/CL_UPDATE"
                    )
                ]
            ]
            await query.message.edit_text(f"H·¥á è {query.from_user.mention} B·¥ú·¥Ö·¥Ö è ·¥õ ú…™s ·¥ç·¥è·¥†…™·¥á …™s …¥·¥è·¥õ  è·¥á·¥õ  Ä·¥á ü·¥á·¥Äs·¥á·¥Ö ·¥è Ä ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á", reply_markup=InlineKeyboardMarkup(btn))            
            

@Client.on_callback_query()
async def cb_handler2(client: Client, query: CallbackQuery):
 
    if query.data == "close_data":
        await query.message.delete()
    elif query.data == "delallconfirm":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            grpid = await active_connection(str(userid))
            if grpid is not None:
                grp_id = grpid
                try:
                    chat = await client.get_chat(grpid)
                    title = chat.title
                except:
                    await query.message.edit_text("Make sure I'm present in your group!!", quote=True)
                    return await query.answer('P·¥á·¥†·¥á Ä A ü ü·¥á')
            else:
                await query.message.edit_text(
                    "I'm not connected to any groups!\nCheck /connections or connect to any groups",
                    quote=True
                )
                return
        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            title = query.message.chat.title

        else:
            return

        st = await client.get_chat_member(grp_id, userid)
        if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
            await del_all(query.message, grp_id, title)
        else:
            await query.answer("You need to be Group Owner or an Auth User to do that!", show_alert=True)
    elif query.data == "delallcancel":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            await query.message.reply_to_message.delete()
            await query.message.delete()

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            st = await client.get_chat_member(grp_id, userid)
            if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
                await query.message.delete()
                try:
                    await query.message.reply_to_message.delete()
                except:
                    pass
            else:
                await query.answer("H·¥á è M·¥Ä ú…¥ D·¥è…¥·¥õ T·¥è·¥ú·¥Ñ ú O·¥õ ú·¥á Äs P Ä·¥è·¥ò·¥á Ä·¥õ…™·¥ás üòÅ", show_alert=True)
    elif "groupcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        act = query.data.split(":")[2]
        hr = await client.get_chat(int(group_id))
        title = hr.title
        user_id = query.from_user.id

        if act == "":
            stat = "C·¥è…¥…¥·¥á·¥Ñ·¥õ"
            cb = "connectcb"
        else:
            stat = "D…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ"
            cb = "disconnect"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{stat}", callback_data=f"{cb}:{group_id}"),
             InlineKeyboardButton("D·¥á ü·¥á·¥õ·¥á", callback_data=f"deletecb:{group_id}")],
            [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="backcb")]
        ])

        await query.message.edit_text(
            f"G Ä·¥è·¥ú·¥ò N·¥Ä·¥ç·¥á :- **{title}**\nG Ä·¥è·¥ú·¥ò I·¥Ö :- `{group_id}`",
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )
        return await query.answer('H·¥Ä·¥ò·¥ò è A ü ü·¥á D·¥Ä')
    elif "connectcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]
        hr = await client.get_chat(int(group_id))

        title = hr.title
        user_id = query.from_user.id

        mkinact = await make_inactive(str(user_id))

        if mkinact:
            await query.message.edit_text(
                f"Disconnected from **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text(
                f"Some error occurred!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return
    elif "deletecb" in query.data:
        await query.answer()

        user_id = query.from_user.id
        group_id = query.data.split(":")[1]

        delcon = await delete_connection(str(user_id), str(group_id))

        if delcon:
            await query.message.edit_text(
                "Successfully deleted connection"
            )
        else:
            await query.message.edit_text(
                f"Some error occurred!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer('ùôøùôªùô¥ùô∞ùöÇùô¥ ùöÇùô∑ùô∞ùöÅùô¥ ùô∞ùôΩùô≥ ùöÇùöÑùôøùôøùôæùöÅùöÉ')
    elif query.data == "backcb":
        await query.answer()

        userid = query.from_user.id

        groupids = await all_connections(str(userid))
        if groupids is None:
            await query.message.edit_text(
                "There are no active connections!! Connect to some groups first.",
            )
            return await query.answer('ùôøùôªùô¥ùô∞ùöÇùô¥ ùöÇùô∑ùô∞ùöÅùô¥ ùô∞ùôΩùô≥ ùöÇùöÑùôøùôøùôæùöÅùöÉ')
        buttons = []
        for groupid in groupids:
            try:
                ttl = await client.get_chat(int(groupid))
                title = ttl.title
                active = await if_active(str(userid), str(groupid))
                act = "‚úÖ" if active else ""
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{title} {act}", callback_data=f"groupcb:{groupid}:{act}"
                        )
                    ]
                )
            except:
                pass
        if buttons:
            await query.message.edit_text(
                "Your connected group details ;\n\n",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
    elif "alertmessage" in query.data:
        grp_id = query.message.chat.id
        i = query.data.split(":")[1]
        keyword = query.data.split(":")[2]
        reply_text, btn, alerts, fileid = await find_filter(grp_id, keyword)
        if alerts is not None:
            alerts = ast.literal_eval(alerts)
            alert = alerts[int(i)]
            alert = alert.replace("\\n", "\n").replace("\\t", "\t")
            await query.answer(alert, show_alert=True)
    if query.data.startswith("file"):
        ident, file_id, rid = query.data.split("#")

        if int(rid) not in [query.from_user.id, 0]:
            return await query.answer(UNAUTHORIZED_CALLBACK_TEXT, show_alert=True)

        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('No such file exist.')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        mention = query.from_user.mention if query.from_user else "Anounymous"
        f_caption = files.caption
        settings = await get_settings(query.message.chat.id)
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption = CUSTOM_FILE_CAPTION.format(file_name='' if title is None else title,
                                                       file_size='' if size is None else size,
                                                       file_caption='' if f_caption is None else f_caption)                                                      
            except Exception as e:
                logger.exception(e)
            f_caption = f_caption
        if f_caption is None:
            f_caption = f"{files.file_name}"
        btn = [
            [
                InlineKeyboardButton(
                    '‚ûï ·¥Ä·¥Ö·¥Ö  ô·¥è·¥õ ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï', url=f'http://t.me/{temp.U_NAME}?startgroup=true'
                )
            ]
        ]
        try:
            if AUTH_CHANNEL and not await is_subscribed(client, query):
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
            elif settings['botpm']:
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
            else:
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
              
            
         
            
        except UserIsBlocked:
            await query.answer('Unblock the bot mahn !', show_alert=True)
        except PeerIdInvalid:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
        except Exception as e:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
 
    elif query.data == "c_help":
        btn = [[
            InlineKeyboardButton('B·¥Ä·¥Ñ·¥ã', callback_data="c_start")
        ]]
        await query.message.edit_text("Coming Soon..", reply_markup=InlineKeyboardMarkup(btn), parse_mode=enums.ParseMode.HTML)
    elif query.data == "c_about":
        btn = [[
            InlineKeyboardButton('B·¥Ä·¥Ñ·¥ã', callback_data="c_start")
        ]]
        await query.message.edit_text("Coming Soon..", reply_markup=InlineKeyboardMarkup(btn), parse_mode=enums.ParseMode.HTML)
    elif query.data == "c_start":
        btn = [[
            InlineKeyboardButton('‚ùóH·¥á ü·¥ò', callback_data="c_help"),
            InlineKeyboardButton('üòé A ô·¥è·¥ú·¥õ', callback_data="c_about")
        ]]
        await query.message.edit_text(
            text = f"<b>Y·¥è Y·¥è !\nI·¥Ä·¥ç A S…™·¥ç·¥ò ü·¥á A·¥ú·¥õ·¥è F…™ ü·¥õ·¥á + F…™ ü·¥á S ú·¥Ä Ä·¥á B·¥è·¥õ...</b>",
            reply_markup = InlineKeyboardMarkup(btn)
        )
 
    elif query.data == "pages":
        
        await query.answer('E…¥·¥õ ú·¥Ä·¥Ö·¥Ä M·¥°·¥è…¥·¥á N·¥è·¥ã·¥ú…¥…¥·¥Ä üôå')
        
  
    elif query.data == "connect":
        st = await client.get_chat_member(query.message.chat.id, query.from_user.id)
        if (
                st.status != enums.ChatMemberStatus.ADMINISTRATOR
                and st.status != enums.ChatMemberStatus.OWNER
                and str(query.from_user.id) not in ADMINS
        ):
            return
        await query.message.edit_text(
            text = '<b>‚Ä¢ F…™ Äs·¥õ A·¥Ö·¥Ö B·¥è·¥õ T·¥è Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò A…¥·¥Ö M·¥Ä·¥ã·¥á A·¥Ö·¥ç…™…¥\n\n‚Ä¢ T ú·¥á…¥ T·¥Ä·¥ã·¥á Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò I·¥Ö\n\n‚Ä¢ T ú·¥á…¥ C·¥è·¥ç·¥á B·¥Ä·¥Ñ·¥ã T·¥è B·¥è·¥õ P·¥ç\n\n‚Ä¢ T ú·¥á…¥ S·¥á…¥·¥õ " /connect [C ú·¥Ä·¥õ I·¥Ö]\n\nE…¢ : \n/connect -100*******</b>',
            reply_markup = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton('‚ùå C ü·¥ès·¥á', callback_data='close_data')
                    ]
                ]
            ),
            parse_mode=enums.ParseMode.HTML
        )
        
    elif query.data == "moviis":  
        await query.answer("‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ\n Ä·¥á«´·¥ú·¥áÍú±·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ\n‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ\n\n…¢·¥è ·¥õ·¥è …¢·¥è·¥è…¢ ü·¥á ‚û† ·¥õ è·¥ò·¥á ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á ‚û† ·¥Ñ·¥è·¥ò è ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ …¥·¥Ä·¥ç·¥á ‚û† ·¥ò·¥ÄÍú±·¥õ·¥á ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò\n\n·¥áx·¥Ä·¥ç·¥ò ü·¥á :  ü·¥è·¥ã…™ S01 E01\n\nüöØ ·¥Ö·¥è…¥·¥õ ·¥úÍú±·¥á ‚û† ':(!,./)\n\n¬© T ú·¥è·¥ç·¥Äs S ú·¥á ü ô è ‚Ñ¢Ô∏è", show_alert=True)   
                           
    elif query.data == "reason":
        await query.answer(script.SPELL_TXT, show_alert=True)        
        
    elif query.data =="set2":
   
        userid = query.from_user.id if query.from_user else None
        if not userid:
            return await query.reply(f"You are anonymous admin. Use /connect {query.message.chat.id} in PM")
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            grpid = await active_connection(str(userid))
            if grpid is not None:
                grp_id = grpid
                try:
                    chat = await client.get_chat(grpid)
                    title = chat.title
                except:
                    await query.reply_text("Make sure I'm present in your group!!", quote=True)
                    return
            else:
                await query.reply_text("I'm not connected to any groups!", quote=True)
                return

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            title = query.message.chat.title

        else:
            return

        st = await client.get_chat_member(grp_id, userid)
        if (
                st.status != enums.ChatMemberStatus.ADMINISTRATOR
                and st.status != enums.ChatMemberStatus.OWNER
                and str(userid) not in ADMINS
        ):
            return
        settings = await get_settings(grp_id)
        if settings is not None:
            await query.answer('S·¥á…¥·¥õ·¥á·¥Ö ‚úÖ')
            buttons = [
                [
                    InlineKeyboardButton('F…™ ü·¥õ·¥á Ä B·¥ú·¥õ·¥õ·¥è…¥',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}'),
                    InlineKeyboardButton('S…™…¥…¢ ü·¥á' if settings["button"] else 'D·¥è·¥ú ô ü·¥á',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}')
                ],
                
                
                [
                    InlineKeyboardButton('I·¥ç·¥Ö ô', callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}'),
                    InlineKeyboardButton('Y·¥ás' if settings["imdb"] else 'N·¥è',
                                         callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('S·¥ò·¥á ü ü C ú·¥á·¥Ñ·¥ã',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}'),
                    InlineKeyboardButton('N·¥á·¥°' if settings["spell_check"] else 'D·¥á“ì·¥Ä·¥ú ü·¥õ',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}')
                ],
                
                [
                    InlineKeyboardButton('C ü·¥ès·¥á S·¥á·¥õ·¥õ…™…¥…¢s', callback_data='close_data')
                ]
            ]
            
            if settings["button"]:
                stats="S…™…¥…¢ ü·¥á"
            else:
                stats="D·¥è·¥ú ô ü·¥á"
            
            
            if settings["imdb"]:
                stats4="Y·¥ás"
            else:
                stats4="N·¥è"
            if settings["spell_check"]:
                stats5="N·¥á·¥°"
            else:
                stats5="D·¥á“ì·¥Ä·¥ú ü·¥õ"
     
            
            
            await client.send_message(
                chat_id=query.from_user.id,
                text=f"<b><u>C·¥ú Ä Ä·¥á…¥·¥õ s·¥á·¥õ·¥õ…™…¥…¢s F·¥è Ä {title}</u></b>\n\nF…™ ü·¥õ·¥á Ä B·¥ú·¥õ·¥õ·¥è…¥ : {stats}\nR·¥á·¥Ö…™·¥á Ä·¥Ñ·¥õ T·¥è : {stats2}\nA·¥ú·¥õ·¥è F…™ ü·¥õ·¥á Ä : {stats3}\nI·¥ç·¥Ö ô : {stats4}\nS·¥ò·¥á ü ü C ú·¥á·¥Ñ·¥ã : {stats5}\nW·¥á ü·¥Ñ·¥è·¥ç·¥á : {stats6}\n\n<b>H·¥á è B·¥ú·¥Ö·¥Ö è H·¥á Ä·¥á Y·¥è·¥ú C·¥Ä…¥ C ú·¥Ä…¥…¢·¥á S·¥á·¥õ·¥õ…™…¥…¢s As Y·¥è·¥ú Ä W…™s ú B è Us…™…¥…¢ B·¥á ü·¥° B·¥ú·¥õ·¥õ·¥è…¥s</b>",
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=enums.ParseMode.HTML
            )
            btn = [
                [
                    InlineKeyboardButton(
                        'üìÆ G·¥è T·¥è T ú·¥á C ú·¥Ä·¥õ üìÆ', url="t.me/CL_FILTER_BOT"
                    )
                ]
            ]
            await query.message.edit_text(
                text="<i><b>S·¥á·¥õ·¥õ…™…¥…¢s M·¥á…¥·¥ú W·¥Äs S·¥á…¥·¥õ I…¥ Y·¥è·¥ú Ä P·¥ç ‚úÖ</b></i>",
                reply_markup=InlineKeyboardMarkup(btn),
                parse_mode=enums.ParseMode.HTML
            )
              
    elif query.data.startswith("setgs"):
        ident, set_type, status, grp_id = query.data.split("#")
        grpid = await active_connection(str(query.from_user.id))
           
        if str(grp_id) != str(grpid):
            btn = [
                [
                    InlineKeyboardButton(
                        '‚ùóH·¥è·¥° T·¥è C·¥è…¥…¥·¥á·¥Ñ·¥õ A C ú·¥Ä·¥õ‚ùó', callback_data=f'connect'
                    )
                ]
            ]
            await query.message.edit_text(f"<u><b>S·¥è Ä Ä è {query.from_user.mention}</u>\n\nI C·¥Ä…¥·¥õ O·¥ò·¥á…¥ S·¥á·¥õ·¥õ…™…¥…¢s L·¥è·¥è·¥ãs L…™·¥ã·¥á I·¥Ä·¥ç N·¥è·¥õ C·¥è…¥…¥·¥á·¥Ñ·¥õ T·¥è {query.message.chat.title} ü§ß\n\nN ô : I“ì Y·¥è·¥ú D…™·¥Ö…¥·¥è·¥õ K…¥·¥è·¥° H·¥è·¥° T·¥è C·¥è…¥…¥·¥á·¥Ñ·¥õ C ü…™·¥Ñ·¥ã B·¥á ü·¥è·¥° B·¥ú·¥õ·¥õ·¥è…¥ ‚ùó", reply_markup=InlineKeyboardMarkup(btn), parse_mode=enums.ParseMode.HTML)
            return await query.answer()
        
        if status == "True":
            await save_group_settings(grpid, set_type, False)
        else:
            await save_group_settings(grpid, set_type, True)

        settings = await get_settings(grpid)

        if settings is not None:
            await query.answer('C ú·¥Ä…¥…¢…™…¥…¢....')
            buttons = [
                [
                    InlineKeyboardButton('F…™ ü·¥õ·¥á Ä B·¥ú·¥õ·¥õ·¥è…¥',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}'),
                    InlineKeyboardButton('S…™…¥…¢ ü·¥á' if settings["button"] else 'D·¥è·¥ú ô ü·¥á',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}')
                ],
                
                
                
                [
                    InlineKeyboardButton('I·¥ç·¥Ö ô', callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}'),
                    InlineKeyboardButton('Y·¥ás' if settings["imdb"] else 'N·¥è',
                                         callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('S·¥ò·¥á ü ü C ú·¥á·¥Ñ·¥ã',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}'),
                    InlineKeyboardButton('N·¥á·¥°' if settings["spell_check"] else 'D·¥á“ì·¥Ä·¥ú ü·¥õ',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}')
                ],
                
                [
                    InlineKeyboardButton('C ü·¥ès·¥á S·¥á·¥õ·¥õ…™…¥…¢s', callback_data='close_data')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            if settings["button"]:
                stats="S…™…¥…¢ ü·¥á"
            else:
                stats="D·¥è·¥ú ô ü·¥á"
           
            if settings["imdb"]:
                stats4="Y·¥ás"
            else:
                stats4="N·¥è"
            if settings["spell_check"]:
                stats5="N·¥á·¥°"
            else:
                stats5="D·¥á“ì·¥Ä·¥ú ü·¥õ"
    
    
            await query.message.edit_text(
                text=f"<b><u>C·¥ú Ä Ä·¥á…¥·¥õ s·¥á·¥õ·¥õ…™…¥…¢s F·¥è Ä {query.message.chat.title}</u></b>\n\nF…™ ü·¥õ·¥á Ä B·¥ú·¥õ·¥õ·¥è…¥ : {stats}\nR·¥á·¥Ö…™·¥á Ä·¥Ñ·¥õ T·¥è : {stats2}\nA·¥ú·¥õ·¥è F…™ ü·¥õ·¥á Ä : {stats3}\nI·¥ç·¥Ö ô : {stats4}\nS·¥ò·¥á ü ü C ú·¥á·¥Ñ·¥ã : {stats5}\nW·¥á ü·¥Ñ·¥è·¥ç·¥á : {stats6}\n\n<b>H·¥á è B·¥ú·¥Ö·¥Ö è H·¥á Ä·¥á Y·¥è·¥ú C·¥Ä…¥ C ú·¥Ä…¥…¢·¥á S·¥á·¥õ·¥õ…™…¥…¢s As Y·¥è·¥ú Ä W…™s ú B è Us…™…¥…¢ B·¥á ü·¥è·¥° B·¥ú·¥õ·¥õ·¥è…¥s</b>",
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
async def auto_filter(client, msg, spoll=False):
    if not spoll:
        message = msg
        settings = await get_settings(message.chat.id)
        if message.text.startswith("/"): return  # ignore commands
        if re.findall("((^\/|^,|^!|^\.|^[\U0001F600-\U000E007F]).*)", message.text):
            return
        if 2 < len(message.text) < 100:
            search = message.text
            files, offset, total_results = await get_search_results(search.lower(), offset=0, filter=True)
            if not files:
                if settings["spell_check"]:
                    return await advantage_spell_check_1_(msg)
                else:
                    return await advantage_spell_check_2_(msg)
                    return
        else:
            return
    else:
        settings = await get_settings(msg.message.chat.id)
        message = msg.message.reply_to_message  # msg will be callback query
        mention = message.from_user.mention if message.from_user else "A…¥·¥è·¥ú…¥ è·¥ç·¥ús"
        search, files, offset, total_results = spoll
    if settings["button"]:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"‚äπ {get_size(file.file_size)} ‚Ä£ {file.file_name}", callback_data=f'file#{file.file_id}#{msg.from_user.id if msg.from_user is not None else 0}'
                ),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}",
                    callback_data=f'file#{file.file_id}#{msg.from_user.id if msg.from_user is not None else 0}',
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'file#{file.file_id}#{msg.from_user.id if msg.from_user is not None else 0}',
                ),
            ]
            for file in files
        ]

    btn.insert(0, 
        [
            InlineKeyboardButton(f'F…™ ü·¥ás: {total_results}', 'dupe'),
            InlineKeyboardButton(f'M·¥è·¥†…™·¥á', 'dupe'),
            InlineKeyboardButton(f'S·¥á Ä…™·¥áÍú±', 'dupe')
        ]
    )
    

    if offset != "":
        key = f"{message.chat.id}-{message.id}"
        BUTTONS[key] = search
        req = message.from_user.id if message.from_user else 0
        btn.append(
            [InlineKeyboardButton("P·¥Ä…¢·¥ás", callback_data="pages"),
             InlineKeyboardButton(text=f"1 - {math.ceil(int(total_results) / 10)}", callback_data="pages"),
             InlineKeyboardButton(text="N·¥áx·¥õ ‚Ä¢", callback_data=f"next_{req}_{key}_{offset}")]
        )
        
    else:
        btn.append(
            [InlineKeyboardButton(text="N·¥è M·¥è Ä·¥á F…™ ü·¥ás F·¥è·¥ú…¥·¥Ö", callback_data="pages")]
        )
  
    
    imdb = await get_poster(search, file=(files[0]).file_name) if settings["imdb"] else None
    TEMPLATE = settings['template']
    if imdb:
        cap1 = TEMPLATE.format(
            query=search,
            title=imdb['title'],
            votes=imdb['votes'],
            aka=imdb["aka"],
            seasons=imdb["seasons"],
            box_office=imdb['box_office'],
            localized_title=imdb['localized_title'],
            kind=imdb['kind'],
            imdb_id=imdb["imdb_id"],
            cast=imdb["cast"],
            runtime=imdb["runtime"],
            countries=imdb["countries"],
            certificates=imdb["certificates"],
            languages=imdb["languages"],
            genres=imdb['genres'],
            poster=imdb['poster'],
            plot=imdb['plot'],
            rating=imdb['rating'],
            url=imdb['url'],
            **locals()
        )
    else:
        imdb2 = await get_poster(search)
        cap2 = script.IMDB_MOVIE_2.format(query=search, title=imdb2['title'], rating=imdb2['rating'], genres=imdb2['genres'], year=imdb2['release_date'], runtime=imdb2['runtime'], language=imdb2['languages'], group=message.chat.title, url="https://t.me/cinema_lookam", short=imdb2['plot']) if imdb2 else f"ùóôùó∂ùóπùó∫ : <b>{search}</b>\nùó¨ùó≤ùóÆùóø : <code>N/A</code>\nùó•ùóÆùòÅùó∂ùóªùó¥ : <code>N/A</code>\nùóüùóÆùóªùó¥ùòÇùóÆùó¥ùó≤ : <code>N/A</code>\n\n¬©Ô∏è ùóßùó≤ùóÆùó∫ <a href=https://t.me/cinema_lookam><b>{message.chat.title}</b></a> ‚Ñ¢Ô∏è"
    
    if imdb and imdb.get('poster
        try:
            fmsg = await message.reply_photo(photo=imdb.get('poster'), caption=cap1[:1024],
                                      reply_markup=InlineKeyboardMarkup(btn))
        except (MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty):
            pic = imdb.get('poster')
            poster = pic.replace('.jpg', "._V1_UX360.jpg")
            fmsg = await message.reply_photo(photo=poster, caption=cap1[:1024], reply_markup=InlineKeyboardMarkup(btn))
        except Exception as e:
            logger.exception(e)
            fmsg = await message.reply_photo(photo=random.choice(REQ_PIC), caption=cap2, reply_markup=InlineKeyboardMarkup(btn))
    else:
        imdb2 = await get_poster(search)
        fmsg = await message.reply_photo(photo=random.choice(REQ_PIC), caption=cap2, reply_markup=InlineKeyboardMarkup(btn))
    await asyncio.sleep(DELETE_TIME)
    await message.delete()
    await fmsg.delete()
  
    if spoll:
        await msg.message.delete()
        
##-------------------------------------[ 1st Spell Check Message ]-------------------------------------------##

async def advantage_spell_check_1_(msg):
    
    search = msg.text
    reply = search.replace(
        " ",
        "+"
    )
    mention = msg.from_user.mention if msg.from_user else "A…¥·¥è·¥ú…¥ è·¥ç·¥ús"
    query = re.sub(
        r"\b(pl(i|e)*?(s|z+|ease|se|ese|(e+)s(e)?)|((send|snd|giv(e)?|gib)(\sme)?)|movie(s)?|new|latest|br((o|u)h?)*|^h(e|a)?(l)*(o)*|mal(ayalam)?|t(h)?amil|file|that|find|und(o)*|kit(t(i|y)?)?o(w)?|thar(u)?(o)*w?|kittum(o)*|aya(k)*(um(o)*)?|full\smovie|any(one)|with\ssubtitle(s)?)",
        "", msg.text, flags=re.IGNORECASE)  # plis contribute some common words
    query = query.strip() + " movie"
    g_s = await search_gagala(query)
    g_s += await search_gagala(msg.text)
    gs_parsed = []
    if not g_s:
        buttons = [[
            InlineKeyboardButton('üçÅ R·¥á·¥Äs·¥è…¥', callback_data="reason")
        ]]
        a = await msg.reply(f"<b><u>H·¥á ü ü·¥è {mention}</b></u>\n\nI C·¥è·¥ú ü·¥Ö N·¥è·¥õ F…™…¥·¥Ö A…¥ è·¥õ ú…™…¥…¢ R·¥á ü·¥Ä·¥õ·¥á·¥Ö T·¥è T ú·¥Ä·¥õ\nP ü·¥á·¥Äs·¥á C ú·¥á·¥Ñ·¥ã Y·¥è·¥ú Ä S·¥ò·¥á ü ü…™…¥…¢ ü§ß", reply_markup = InlineKeyboardMarkup(buttons))
        await asyncio.sleep(100)
        await msg.delete()
        await a.delete()
        del msg, a
        return
    regex = re.compile(r".*(imdb|wikipedia).*", re.IGNORECASE)  # look for imdb / wiki results
    gs = list(filter(regex.match, g_s))
    gs_parsed = [re.sub(
        r'\b(\-([a-zA-Z-\s])\-\simdb|(\-\s)?imdb|(\-\s)?wikipedia|\(|\)|\-|reviews|full|all|episode(s)?|film|movie|series)',
        '', i, flags=re.IGNORECASE) for i in gs]
    if not gs_parsed:
        reg = re.compile(r"watch(\s[a-zA-Z0-9_\s\-\(\)]*)*\|.*",
                         re.IGNORECASE)  # match something like Watch Niram | Amazon Prime
        for mv in g_s:
            match = reg.match(mv)
            if match:
                gs_parsed.append(match.group(1))
    user = msg.from_user.id if msg.from_user else 0
    movielist = []
    gs_parsed = list(dict.fromkeys(gs_parsed))  # removing duplicates https://stackoverflow.com/a/7961425
    if len(gs_parsed) > 3:
        gs_parsed = gs_parsed[:3]
    if gs_parsed:
        for mov in gs_parsed:
            imdb_s = await get_poster(mov.strip(), bulk=True)  # searching each keyword in imdb
            if imdb_s:
                movielist += [movie.get('title') for movie in imdb_s]
    movielist += [(re.sub(r'(\-|\(|\)|_)', '', i, flags=re.IGNORECASE)).strip() for i in gs_parsed]
    movielist = list(dict.fromkeys(movielist))  # removing duplicates
    if not movielist:
        buttons = [[
            InlineKeyboardButton('üçÅ R·¥á·¥Äs·¥è…¥', "reason"),
            InlineKeyboardButton('üîé S·¥á·¥Ä Ä·¥Ñ ú', url=f'https://www.google.com/search?q={msg.text.replace(" ", "+")}')
        ]]
        a2 = await msg.reply(f"<b><u>S·¥è Ä Ä è {mention}</b></u>\n\nI C·¥è·¥ú ü·¥Ö N·¥è·¥õ F…™…¥·¥Ö A…¥ è·¥õ ú…™…¥…¢ R·¥á ü·¥Ä·¥õ·¥á·¥Ö T·¥è T ú·¥Ä·¥õ\nP ü·¥á·¥Äs·¥á C ú·¥á·¥Ñ·¥ã Y·¥è·¥ú Ä S·¥ò·¥á ü ü…™…¥…¢ ü§ß", reply_markup = InlineKeyboardMarkup(buttons))
        await asyncio.sleep(100)
        await msg.delete()
        await a2.delete()
        del msg, a2
        return
    SPELL_CHECK[msg.id] = movielist
    settings = await get_settings(msg.chat.id)
    reply_markup=InlineKeyboardMarkup([[
    InlineKeyboardButton("üßø I·¥ç·¥Ö ô I…¥“ì·¥è", url=f'https://www.imdb.com')
     ],[
     InlineKeyboardButton("üòå R·¥á·¥Äs·¥è…¥", callback_data="reason"),
     InlineKeyboardButton("üé≠ G·¥è·¥è…¢ ü·¥á", url=f'https://www.google.com')
     ]]
    )     
    imdb=await get_poster(search)
    if imdb and imdb.get('poster'):
        ms = await msg.reply_photo(photo=imdb.get('poster') if settings["imdb"] else random.choice(REQ_PIC), caption=script.IMDB_MOVIE_2.format(query=search, title=imdb.get('title'), rating=imdb.get('rating'), genres=imdb.get('genres'), year=imdb.get('release_date'), runtime=imdb.get('runtime'), language=imdb.get('languages'), group=msg.chat.title, url="https://t.me/CL_UPDATE", short=imdb.get('plot')), reply_markup=reply_markup) 
        await asyncio.sleep(259200)
        await ms.delete()
    else:
        buttons = [[
            InlineKeyboardButton('üçÅ R·¥á·¥Äs·¥è…¥', callback_data="reason"),
            InlineKeyboardButton('üîé S·¥á·¥Ä Ä·¥Ñ ú', url=f'https://www.google.com/search?q={msg.text.replace(" ", "+")}')
        ]]
        a3 = await msg.reply(f"<b><u>S·¥è Ä Ä è {mention}</b></u>\n\nI C·¥è·¥ú ü·¥Ö N·¥è·¥õ F…™…¥·¥Ö A…¥ è·¥õ ú…™…¥…¢ R·¥á ü·¥Ä·¥õ·¥á·¥Ö T·¥è T ú·¥Ä·¥õ\nP ü·¥á·¥Äs·¥á C ú·¥á·¥Ñ·¥ã Y·¥è·¥ú Ä S·¥ò·¥á ü ü…™…¥…¢ ü§ß", reply_markup = InlineKeyboardMarkup(buttons))
        await asyncio.sleep(100)
        await msg.delete()
        await a3.delete()
        del msg, a3
        return
    
##--------------------------------[ 2nd Spell Check Message ]-------------------------------##

async def advantage_spell_check_2_(msg):
    query = re.sub(
        r"\b(pl(i|e)*?(s|z+|ease|se|ese|(e+)s(e)?)|((send|snd|giv(e)?|gib)(\sme)?)|movie(s)?|new|latest|br((o|u)h?)*|^h(e|a)?(l)*(o)*|mal(ayalam)?|t(h)?amil|file|that|find|und(o)*|kit(t(i|y)?)?o(w)?|thar(u)?(o)*w?|kittum(o)*|aya(k)*(um(o)*)?|full\smovie|any(one)|with\ssubtitle(s)?)",
        "", msg.text, flags=re.IGNORECASE)  # plis contribute some common words
    query = query.strip() + " movie"
    g_s = await search_gagala(query)
    g_s += await search_gagala(msg.text)
    gs_parsed = []
    if not g_s:
        btn = [[
            InlineKeyboardButton('üìï …™…¥s·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥è…¥ üìï', callback_data='moviis')
            ],[   
            InlineKeyboardButton('üîç Íú±·¥á·¥Ä Ä·¥Ñ ú …¢·¥è·¥è…¢ ü·¥á üîç', url=f'https://www.google.com/search?q={msg.text.replace(" ", "+")}')
        ]]        
        k=await msg.reply("<b>ùñ≤·¥è Ä Ä è ùñ≠·¥è ùñ•…™ ü·¥áùóå ùñ∂·¥á Ä·¥á ùñ•·¥è·¥ú…¥·¥Ö.\n\nùñ¢ ú·¥á·¥Ñ·¥ã ùñ∏·¥è·¥ú Ä ùñ≤·¥ò·¥á ü ü…™…¥…¢ …™…¥ ùñ¶·¥è·¥è…¢ ü·¥á ·¥Ä…¥·¥Ö ùñ≥ Ä è ùñ†…¢·¥Ä…™…¥. ‚ôªÔ∏è\n\nùñ±·¥á·¥Ä·¥Ö ùñ®…¥ùóå·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥è…¥ùóå “ì·¥è Ä  ô·¥á·¥õ·¥õ·¥á Ä ùñ±·¥áùóå·¥ú ü·¥õùóå üëáüèª</b>", reply_markup=InlineKeyboardMarkup(btn))    
        await asyncio.sleep(20)
        await k.delete()
        await msg.delete()
        return
    regex = re.compile(r".*(imdb|wikipedia).*", re.IGNORECASE)  # look for imdb / wiki results
    gs = list(filter(regex.match, g_s))
    gs_parsed = [re.sub(
        r'\b(\-([a-zA-Z-\s])\-\simdb|(\-\s)?imdb|(\-\s)?wikipedia|\(|\)|\-|reviews|full|all|episode(s)?|film|movie|series)',
        '', i, flags=re.IGNORECASE) for i in gs]
    if not gs_parsed:
        reg = re.compile(r"watch(\s[a-zA-Z0-9_\s\-\(\)]*)*\|.*",
                         re.IGNORECASE)  # match something like Watch Niram | Amazon Prime
        for mv in g_s:
            match = reg.match(mv)
            if match:
                gs_parsed.append(match.group(1))
    user = msg.from_user.id if msg.from_user else 0
    movielist = []
    gs_parsed = list(dict.fromkeys(gs_parsed))  # removing duplicates https://stackoverflow.com/a/7961425
    if len(gs_parsed) > 3:
        gs_parsed = gs_parsed[:3]
    if gs_parsed:
        for mov in gs_parsed:
            imdb_s = await get_poster(mov.strip(), bulk=True)  # searching each keyword in imdb
            if imdb_s:
                movielist += [movie.get('title') for movie in imdb_s]
    movielist += [(re.sub(r'(\-|\(|\)|_)', '', i, flags=re.IGNORECASE)).strip() for i in gs_parsed]
    movielist = list(dict.fromkeys(movielist))  # removing duplicates
    if not movielist:
        btn = [[
            InlineKeyboardButton('üìï …™…¥s·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥è…¥ üìï', callback_data='moviis')
            ],[   
            InlineKeyboardButton('üîç Íú±·¥á·¥Ä Ä·¥Ñ ú …¢·¥è·¥è…¢ ü·¥á üîç', url=f'https://www.google.com/search?q={msg.text.replace(" ", "+")}')
        ]]        
        k=await msg.reply("<b>ùñ≤·¥è Ä Ä è ùñ≠·¥è ùñ•…™ ü·¥áùóå ùñ∂·¥á Ä·¥á ùñ•·¥è·¥ú…¥·¥Ö.\n\nùñ¢ ú·¥á·¥Ñ·¥ã ùñ∏·¥è·¥ú Ä ùñ≤·¥ò·¥á ü ü…™…¥…¢ …™…¥ ùñ¶·¥è·¥è…¢ ü·¥á ·¥Ä…¥·¥Ö ùñ≥ Ä è ùñ†…¢·¥Ä…™…¥. ‚ôªÔ∏è\n\nùñ±·¥á·¥Ä·¥Ö ùñ®…¥ùóå·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥è…¥ùóå “ì·¥è Ä  ô·¥á·¥õ·¥õ·¥á Ä ùñ±·¥áùóå·¥ú ü·¥õùóå üëáüèª</b>", reply_markup=InlineKeyboardMarkup(btn))    
        await asyncio.sleep(20)
        await k.delete()
        await msg.delete()
        return
    SPELL_CHECK[msg.id] = movielist
    btn = [[
        InlineKeyboardButton(text=movie.strip(), callback_data=f"spolling#{user}#{k}",)]for k, movie in enumerate(movielist)]
    btn.append([InlineKeyboardButton(text="‚úò ·¥ç·¥úÍú±·¥õ ·¥Ñ ü·¥èÍú±·¥á ‚úò", callback_data=f'spolling#{user}#close_spellcheck')])
    btn.insert(0,
        [InlineKeyboardButton(f'‚ö†Ô∏é {msg.chat.title} ‚ö†Ô∏é', 'dupe')]
    )
    k=await msg.reply("<b><i>‚úØ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥â‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥ø‡¥ö‡µç‡¥ö ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥§‡¥æ‡¥¥‡µÜ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥® ‡¥µ‡¥≤‡µç‡¥≤‡¥§‡µÅ‡¥Ç ‡¥Ü‡¥£‡µç ‡¥é‡¥ô‡µç‡¥ï‡¥ø‡µΩ.‡¥Ö‡¥§‡¥ø‡µΩ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï</i></b>\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<b><i>‚úØ …™ ·¥Ñ·¥è·¥ú ü·¥Ö…¥'·¥õ Íú∞…™…¥·¥Ö ·¥Ä…¥ è·¥õ ú…™…¥…¢  Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥Ä·¥õ ·¥Ö…™·¥Ö  è·¥è·¥ú ·¥ç·¥á·¥Ä…¥ ·¥Ä…¥ è ·¥è…¥·¥á ·¥èÍú∞ ·¥õ ú·¥áÍú±·¥á?\n\n<u>üìØ N·¥è·¥õ·¥á :</u>\n\n·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á ·¥è…¥ ü è ·¥Ö·¥è…¥·¥õ ·¥úÍú±·¥á  è·¥á·¥Ä Ä  ô·¥ú·¥õ·¥õ·¥è…¥ </i></b>",
                      reply_markup=InlineKeyboardMarkup(btn))
    await asyncio.sleep(60)
    await k.delete()
    await msg.delete()
    

##-------------------------------------[ The End ]-------------------------------------------##

       
       
       
       
       
       
       
       
      
